Open backend: 
(pipenv install) ... pipenv run start 

Open frontend: 
(npm install) ... npm run start 

Database Quick User Creation:
- commands.py
- $ flask insert-test-users 5
- Switch e.g: https://github.com/gdwhittaker94/4Geeks_SWITCH/blob/main/src/api/commands.py

Ignore Migrations in git commits/pushes:
- go to ".gitignore" file
- add 'migrations/' to 'backend stuff' 

4Geeks Class:
- https://www.youtube.com/watch?v=Ei9Cv5uIedk&list=PL2ZWqWbnARIO9Gnt5n0LFiTMz4M1OLgpg&index=36&ab_channel=4GeeksEspa%C3%B1a

JWT EXTENDED LINK:
- https://flask-jwt-extended.readthedocs.io/en/stable/  

Flask-Bcrypt LINK:
- https://flask-bcrypt.readthedocs.io/en/latest/

JSON WEB TOKENS LINK:
- https://jwt.io/ 

BOILERPLATE DOCUMENTATION: 
- https://start.4geeksacademy.com/starters/react-flask 


Notes to self:
- Got sign up and login functionalities working

- We get a token after logging in and it's stored both 
in the flux store and in local storage 

- We also now have a function that runs on each re-render of 
the app (in appContext.js). It gets the token value stored there
and, if there is an actual token value, it sets the token value
in the store to that (otherwise the value is lost on each 
render)

- The login page redirects the user to the private page 

TODO: 
1. Change what the user sees in the login page depending on if
there's a valid token or not (i.e., remove the login inputs
and show a message like "You are already logged in")

2. Watch alejandro video from 1:00:00 

3. Finish private page --> logout functionality (check token
disappears), return user to home page 

4. Make sure you can't just add "/private" to url and access 
the page without a token --> a useEffect checking token value 
in store? 

    ...But if we do add '/private' to url and we have a token, we
    do access the page. 

5. Compare with Vanesa's project

6. Do up design 